#!/usr/bin/env bash
set -euo pipefail

command_name="${1:-""}.sh"
export COMMAND_BIN_NAME="hm"
export COMMAND_TOOLNAME="Hiberus Dockergento"

#
# Resolve absolute path directories
#
resolve_absolute_dir() {
    source="${BASH_SOURCE[0]}"

    while [ -h "$source" ]; do

        # resolve $source until the file is no longer a symlink
        DIR=$(cd -P "$(dirname "$source")" && pwd)
        source="$(readlink "$source")"

        # if $source was a relative symlink, 
        # we need to resolve it relative to the path where the symlink file was located
        [[ $source != /* ]] && source="$DIR/$source"
    done

    ABSOLUTE_BIN_PATH="$(cd -P "$(dirname "$source")" && pwd)"
    ABSOLUTE_PATH="$ABSOLUTE_BIN_PATH/.."
}

#
# Export absolute paths of main directories
#
init_dirs() {
    resolve_absolute_dir
    export COMMAND_BIN_DIR="$ABSOLUTE_PATH"
    export COMMANDS_DIR="$ABSOLUTE_PATH/console/commands"
    export DATA_DIR="$ABSOLUTE_PATH/data"
    export CUSTOM_COMMANDS_DIR="$PWD/config/$COMMAND_BIN_NAME/commands"
    export DOCKER_CONFIG_DIR="config/docker"
    export CUSTOM_PROPERTIES_DIR="$PWD/$DOCKER_CONFIG_DIR"
    export TASKS_DIR="$ABSOLUTE_PATH/console/tasks"
    export HELPERS_DIR="$ABSOLUTE_PATH/console/helpers"
    export COMPONENTS_DIR="$ABSOLUTE_PATH/console/components"
}

#
# Import all necessary dependencies
#
import_dependencies() {
    source "$TASKS_DIR"/load_properties.sh
    source "$COMPONENTS_DIR"/print_message.sh
    source "$HELPERS_DIR"/map_arguments.sh
    source "$HELPERS_DIR"/process_hm_options.sh
    source "$TASKS_DIR"/set_machine_specific_properties.sh
}

#
# Check if exit command in native commands and custom commands
#
check_command_dir() {
    if [ ! -f "$COMMANDS_DIR/$command_name" ]; then
        if [[ ! -f "$CUSTOM_COMMANDS_DIR/$command_name" ]]; then
            print_error "Command not found\n"
            print_default "Execute "
            print_code "$COMMAND_BIN_NAME --help"
            print_default " to see commands available\n"
            exit 1
        else
            COMMANDS_DIR="$CUSTOM_COMMANDS_DIR"
        fi
    fi
}

#
# Set DOCKER_COMOPSE and COMPOSE_PROJECT_NAME variables
#
docker_env_variables() {
    if [[ -n "${COMPOSE_PROJECT_NAME+}" ]]; then
        export COMPOSE_PROJECT_NAME="$COMPOSE_PROJECT_NAME"
    fi

    export DOCKER_COMPOSE="docker-compose -f $DOCKER_COMPOSE_FILE -f $DOCKER_COMPOSE_FILE_MACHINE"
    export DOCKER_COMPOSE_VERSION=$(docker-compose version --short)
}

#
# Validate command that need docker
#
validate_command() {
    # TODO: Change to in_array
    if [[ 
        "$1" != "setup" && 
        "$1" != "create-project" &&
        "$1" != "docker-stop-all" &&
        "$1" != "docker-remove-all" &&
        "$1" != "compatibility" &&
        "$1" != "update" 
    ]]; then
        source "$HELPERS_DIR"/docker.sh
        is_docker_service_running
        "$TASKS_DIR"/validate_docker_compose.sh
    fi
}

#
# Execute of hm command
#
execute() {
    # Initailize directory paths variables
    init_dirs
    # Import neecessary dependencies
    import_dependencies
    # Show help information when there is an argument --help or -h
    execute_process_hm_options "$@"
    # Check if exit command
    check_command_dir "$1"
    # Set composer project name
    docker_env_variables
    # Validation docker compose
    validate_command "$1"
    # Map arguments to sort kind argument
    arguments=$(parseToShortArguments "$@")
    shift

    "$COMMANDS_DIR/$command_name" $arguments
}


execute "$@"