{
    "bash": {
        "description": "Connect into container using bash [Default container: php]",
        "opts": [
            {
                "name": {
                    "short": "r",
                    "long": "root"
                },
                "description": "Use bash as root user"
            }
        ]
    },
    "cloud-login": {
        "description": "Magento Cloud Login"
    },
    "cloud": {
        "description": "Magento Cloud Cli",
        "usage": "cloud [options]"
    },
    "compatibility": {
        "description": "Check Magento version compatibility"
    },
    "composer": {
        "description": "Execute composer inside php container",
        "args": [
            {
                "name": "composer-subcommands",
                "description": "composer commands (install, update, ...)"
            }
        ]
    },
    "config-env": {
        "description": "Launch config set of project for local environment",
        "usage": "config-env"
    },
    "copy-from-container": {
        "description": "(Mac only) Copy and overwrite container content into host",
        "args": [
            {
                "name": "path",
                "description": "Do not ask confirmation to remove host destination"
            }
        ],
        "example": "copy-from-container generated",
        "mac": true
    },
    "copy-to-container": {
        "description": "(Mac only) Copy and overwrite host content into container",
        "args": [
            {
                "name": "path",
                "description": "Folder to copy",
                "multiple": true
            }
        ],
        "example": "copy-to-container vendor",
        "mac": true
    },
    "create-project": {
        "description": "Create new magento project inside current directory",
        "example": "create-project -u -e=community -p=\"my-project\" -r=\".\"  -v=2.4.5-p1",
        "opts": [
            {
                "name": {
                    "short": "e",
                    "long": "edition"
                },
                "description": "Magento edition (community | enterprise) "
            }, {
                "name": {
                    "short": "p",
                    "long": "project-name"
                },
                "description": "Project name. Domain is compose with <project_name>.local"
            }, {
                "name": {
                    "short": "r",
                    "long": "root-directory"
                },
                "description": "Project relative path"
            }, {
                "name": {
                    "short": "u",
                    "long": "use-default"
                },
                "description": "Use default settings: \n\t\t\t- edition = community \n\t\t\t- version = <last-version> \n\t\t\t- project-name = <basename> \n\t\t\t- root-directory = '.' \n\t\t\t- basic-settings = <default-local-settings>)"
            }, {
                "name": {
                    "short": "v",
                    "long": "version"
                },
                "description": "Magento version (you can see all available version with hm compatibility command)"
            }
        ]
    },
    "debug-off": {
        "description": "Disable xDebug"
    },
    "debug-on": {
        "description": "Enable xDebug"
    },
    "docker-compose": {
        "description": "Execute docker-compose using configuration for your machine",
        "args": [
            {
                "name": "[docker-opts]",
                "description": "docker-compose commands (exec, up, down, ...)"
            }
        ]
    },
    "docker-stop-all": {
        "description": "Stop all running containers"
    },
    "down": {
        "description": "Stop and remove containers, networks, images, and volumes (-v)",
        "example": "down -v"
    },
    "exec": {
        "description": "Execute a command in a running container [Default container: php]",
        "opts": [
            {
                "name": {
                    "short": "r",
                    "long": "root"
                },
                "description": "Run command as root user"
            }
        ],
        "example": "exec ls -lah"
    }, 
    "grunt": {
        "description": "Prepare grunt configuration and compile theme styles using grunt",
        "example": "grunt Hiberus/luma es_ES",
        "args": [
            {
                "name": "Vendor/theme",
                "description": "Theme vendor reference"
            }, {
                "name": "locale_LOCALE",
                "description": "Locale code"
            }
        ]
    },
    "install": {
        "description": "Execute setup:install Magento command with custom config",
        "opts": [
            {
                "name": {
                    "short": "u",
                    "long": "use-default"
                },
                "description": "Use default settings like currency, admin-user, password-user, etc."
            }
        ]
    },
    "magento": {
        "description": "Execute Magento console commands",
        "args": [
            {
                "name": "magento-subcommand",
                "description": "Execute Magento subcommand."
            }
        ],
        "example": "magento cache:clean"
    },
    "masquerade": {
        "example": "masquerade\n\n\t >>> To add proyect config files create the following folder: config/docker/masquerade/magento2 and include de yaml files (.yaml) inside the newly created folder (magento2).",
        "description": "Execute masquerade tool. 'hm masquerade --help' to view more info. "
    },
    "mysql": {
        "example": "mysql < local-path/my-dump.sql\n\t hm mysql -d -i=my-dump.sql",
        "description": "Execute mysql command into container",
        "opts": [
            {
                "name": {
                    "short": "d",
                    "long": "definers"
                },
                "description": "Process database before import (with -i option), removing all DEFINER root"
            }, {
                "name": {
                    "short": "i",
                    "long": "import"
                },
                "description": "Import SQL dump and config minimal settings for local environment"
            }, {
                "name": {
                    "short": "q",
                    "long": "query"
                },
                "description": "Execute query"
            }
        ]
    },
    "mysqldump": {
        "example": "mysqldump local-path/my-dump.sql",
        "description": "Execute mysqldump command into container",
        "args": [
            {
                "name": "path",
                "description": "Sql file path when you want save dump"
            }
        ]
    },
    "n98-magerun": {
        "description": "Execute n98-magerun tool",
        "usage": "n98-magerun [options]"
    },
    "npm": {
        "description": "Execute npm commands into node container",
        "args": [
            {
                "name": "npm-subcommand",
                "description": "Execute npm subcommand."
            }
        ]
    },
    "purge": {
        "description": "Remove all magento generated code (caches, generated, static, view_preprocessed)"
    },
    "rebuild": {
        "description": "Rebuild docker services with current configuration"
    },
    "restart": {
        "description": "Restart docker services",
        "args": [
            {
                "name": "service-name",
                "description": "Restart specific container of the service-name."
            }
        ],
        "example": "restart phpfpm"
    },
    "set-host": {
        "example": "set-host my-project.local",
        "description": "Set host name in /etc/hosts and core_config_data",
        "args": [
            {
                "name": "domain",
                "description": "Domain is desired to set"
            }
        ]
    },
    "setup": {
        "description": "Dockerize magento project",
        "example": "setup -u -i -p=magento --domain=magento.local",
        "opts": [
            {
                "name": {
                    "short": "d",
                    "long": "domain"
                },
                "description": "Domain of local host"
            }, {
                "name": {
                    "short": "D",
                    "long": "dump"
                },
                "description": "Dump for importing"
            }, {
                "name": {
                    "short": "f",
                    "long": "force"
                },
                "description": "Override docker-compose configurations"
            }, {
                "name": {
                    "short": "i",
                    "long": "install"
                },
                "description": "Chose magento installation option"
            }, {
                "name": {
                    "short": "p",
                    "long": "project-name"
                },
                "description": "Project name. Domain is compose with <project_name>.local"
            }, {
                "name": {
                    "short": "r",
                    "long": "root-directory"
                },
                "description": "Project relative path"
            }, {
                "name": {
                    "short": "u",
                    "long": "use-default"
                },
                "description": "Use default settings of user for language, currency, ..."
            }
        ]
    },
    "ssl": {
        "description": "Install SSL certificates for docker environment",
        "args": [
            {
                "name": "domain",
                "description": "Create certificate for specific domain."
            }
        ],
        "example": "ssl domain.local"
    },
    "start": {
        "description": "Start docker services",
        "opts": [
            {
                "name": {
                    "short": "s",
                    "long": "switch"
                },
                "description": "Stop all docker container before execute start"
            }
        ],
        "args": [
            {
                "name": "service-name",
                "description": "Start specific container of the service-name."
            }
        ],
        "example": "start phpfpm"
    },
    "stop": {
        "description": "Stop docker services",
        "args": [
            {
                "name": "service-name",
                "description": "Stop specific container of the service-name."
            }
        ],
        "example": "stop phpfpm"
    },
    "test-integration": {
        "description": "Execute your magento integration tests"
    },
    "test-unit": {
        "description": "Execute your magento unit test"
    },
    "transfer-db": {
        "description": "Transfer database form external source to this project"
    },
    "transfer-media": {
        "description": "Transfer multimedia recurses form external source to this project"
    },
    "update": {
        "description": "Update hiberus docker tool"
    },
    "varnish-off": {
        "description": "Turn off varnish service"
    },
    "varnish-on": {
        "description": "Turn on varnish service"
    }
}   